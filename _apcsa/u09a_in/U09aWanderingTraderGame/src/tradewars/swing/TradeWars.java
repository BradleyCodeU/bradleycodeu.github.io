package tradewars.swing;

import java.awt.Color;
import java.awt.KeyboardFocusManager;
import tradewars.exceptions.*;
import java.text.ParseException;
import javax.swing.JOptionPane;
import java.awt.KeyEventDispatcher;
import java.awt.event.KeyEvent;
import tradewars.*;
import tradewars.events.*;

/**
 * Main app that ties together tradewars with swing
 * @author rob
 */
public class TradeWars extends javax.swing.JFrame {

  private U09aWanderingTraderGame game;

  /** Creates new form Gui */
  public TradeWars() {
    game = U09aWanderingTraderGame.getInstance();
    initComponents();
    refreshDisplay();
    profitLabel.setVisible(false);
    monitorKeyboard();
    setTableRenderers();
    this.setLocationRelativeTo(null);
  }

  private void setTableRenderers() {
    productsTable.setDefaultRenderer(Product.class, new ProductCellRenderer());
    stashTable.setDefaultRenderer(Product.class, new ProductCellRenderer());
  }

  /** 
   * starts monitoring for shortcut codes
   * "m" will focus the "Move" box
   * "b" will focus the "Buy" table
   * "s" will focus the "sell" table
   */
  private void monitorKeyboard() {
    KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
    manager.addKeyEventDispatcher(new KeyEventDispatcher() {

      @Override
      public boolean dispatchKeyEvent(KeyEvent e) {
        if (e.getID() == KeyEvent.KEY_TYPED) {
          char c = e.getKeyChar();
          if (c == 'm') {
            currentLocation.requestFocus();
          } else if (c == 'b') {
            productsTable.requestFocus();
          } else if (c == 's') {
            stashTable.requestFocus();
          }
        }
        return false;
      }
    });

  }

  private void logMessage(Message message) {
    if (message != null) {
      logMessage(message.getColor(), message.getMessage());
    }
  }

  private void logMessage(Color color, String message) {
    gameMessages.append(color, message + "\n");
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    tradeQuantityMode = new javax.swing.ButtonGroup();
    tradeDialog = new javax.swing.JDialog();
    tradeTitle = new javax.swing.JLabel();
    tradePanel = new javax.swing.JPanel();
    tradeModeMax = new javax.swing.JRadioButton();
    tradeModeQuantity = new javax.swing.JRadioButton();
    tradeQuantity = new javax.swing.JFormattedTextField();
    staticQuantityLabel = new javax.swing.JLabel();
    makeTrade = new javax.swing.JButton();
    cancelTrade = new javax.swing.JButton();
    tradeModeLabel = new javax.swing.JLabel();
    tradeNameLabel = new javax.swing.JLabel();
    fightDialog = new javax.swing.JDialog();
    jLabel3 = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    playerHealthMeter = new javax.swing.JProgressBar();
    npcHealthMeter = new javax.swing.JProgressBar();
    playerNameLabel = new javax.swing.JLabel();
    npcNameLabel = new javax.swing.JLabel();
    fightButton = new javax.swing.JButton();
    runButton = new javax.swing.JButton();
    playerPanelWrapper = new javax.swing.JPanel();
    playerPanel = new javax.swing.JPanel();
    cashLabel = new javax.swing.JLabel();
    currentLocation = new javax.swing.JComboBox();
    profitLabel = new javax.swing.JLabel();
    gameLogButton = new javax.swing.JLabel();
    playerPanelBG = new javax.swing.JLabel();
    statusPanelWrapper = new javax.swing.JPanel();
    statusPanel = new javax.swing.JPanel();
    timeLeftMeter = new javax.swing.JProgressBar();
    spaceMeter = new javax.swing.JProgressBar();
    timeLabel = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    healthMeter = new javax.swing.JProgressBar();
    spaceLabel = new javax.swing.JLabel();
    statusBackground = new javax.swing.JLabel();
    gamePanelWrapper = new javax.swing.JPanel();
    staticStashScrollPane = new javax.swing.JScrollPane();
    stashTable = new javax.swing.JTable();
    staticProductScrollPane = new javax.swing.JScrollPane();
    productsTable = new javax.swing.JTable();
    logPanel = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    gameMessagesScrollPane = new javax.swing.JScrollPane();
    gameMessages = new tradewars.swing.ColorTextPane();
    staticProductsLabel = new javax.swing.JLabel();
    staticStashLabel = new javax.swing.JLabel();
    productPanelBG = new javax.swing.JLabel();

    tradeDialog.setBackground(new java.awt.Color(102, 102, 102));
    tradeDialog.setModal(true);
    tradeDialog.setResizable(false);
    tradeDialog.setSize(new java.awt.Dimension(320, 280));
    tradeDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

    tradeTitle.setBackground(new java.awt.Color(205, 255, 205));
    tradeTitle.setFont(new java.awt.Font("Helvetica", 1, 24));
    tradeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    tradeTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/trade.png"))); // NOI18N
    tradeTitle.setText("Lets Make A Trade");
    tradeTitle.setIconTextGap(10);
    tradeTitle.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 20;
    tradeDialog.getContentPane().add(tradeTitle, gridBagConstraints);

    tradePanel.setOpaque(false);
    tradePanel.setLayout(new java.awt.GridBagLayout());

    tradeQuantityMode.add(tradeModeMax);
    tradeModeMax.setForeground(new java.awt.Color(255, 55, 55));
    tradeModeMax.setSelected(true);
    tradeModeMax.setText("Max");
    tradeModeMax.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tradeModeMaxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
    tradePanel.add(tradeModeMax, gridBagConstraints);

    tradeQuantityMode.add(tradeModeQuantity);
    tradeModeQuantity.setForeground(new java.awt.Color(5, 5, 155));
    tradeModeQuantity.setText("Quantity");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    tradePanel.add(tradeModeQuantity, gridBagConstraints);

    tradeQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
    tradeQuantity.setFont(new java.awt.Font("Lucida Grande", 0, 24));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
    tradePanel.add(tradeQuantity, gridBagConstraints);

    staticQuantityLabel.setForeground(new java.awt.Color(104, 14, 104));
    staticQuantityLabel.setText("Quantity");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
    tradePanel.add(staticQuantityLabel, gridBagConstraints);

    makeTrade.setText("Trade");
    makeTrade.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        makeTradeActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
    tradePanel.add(makeTrade, gridBagConstraints);

    cancelTrade.setText("Cancel");
    cancelTrade.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelTradeActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
    tradePanel.add(cancelTrade, gridBagConstraints);

    tradeModeLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
    tradeModeLabel.setForeground(new java.awt.Color(55, 55, 55));
    tradeModeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    tradeModeLabel.setText("Trading");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
    tradePanel.add(tradeModeLabel, gridBagConstraints);

    tradeNameLabel.setFont(new java.awt.Font("Helvetica", 0, 18));
    tradeNameLabel.setForeground(new java.awt.Color(55, 55, 55));
    tradeNameLabel.setText("Product Name");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
    tradePanel.add(tradeNameLabel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
    tradeDialog.getContentPane().add(tradePanel, gridBagConstraints);

    fightDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    fightDialog.setTitle("Fight");
    fightDialog.setAlwaysOnTop(true);
    fightDialog.setModal(true);
    fightDialog.setResizable(false);
    fightDialog.setSize(new java.awt.Dimension(350, 200));
    fightDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

    jLabel3.setBackground(new java.awt.Color(255, 255, 255));
    jLabel3.setFont(new java.awt.Font("Helvetica", 1, 24));
    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/fight.png"))); // NOI18N
    jLabel3.setText("Lets Get It On!");
    jLabel3.setIconTextGap(10);
    jLabel3.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 20;
    gridBagConstraints.weightx = 1.0;
    fightDialog.getContentPane().add(jLabel3, gridBagConstraints);

    jPanel1.setLayout(new java.awt.GridBagLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 20, 10);
    jPanel1.add(playerHealthMeter, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
    jPanel1.add(npcHealthMeter, gridBagConstraints);

    playerNameLabel.setText("You");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 20, 10);
    jPanel1.add(playerNameLabel, gridBagConstraints);

    npcNameLabel.setText("NPC");
    npcNameLabel.setPreferredSize(new java.awt.Dimension(200, 16));
    npcNameLabel.setSize(new java.awt.Dimension(200, 16));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
    jPanel1.add(npcNameLabel, gridBagConstraints);

    fightButton.setText("Fight!");
    fightButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fightButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
    jPanel1.add(fightButton, gridBagConstraints);

    runButton.setText("Run!");
    runButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        runButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
    jPanel1.add(runButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
    fightDialog.getContentPane().add(jPanel1, gridBagConstraints);

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Wandering Trader Game");
    setName("mainFrame"); // NOI18N
    setResizable(false);
    getContentPane().setLayout(new java.awt.GridBagLayout());

    playerPanelWrapper.setAlignmentX(0.0F);
    playerPanelWrapper.setAlignmentY(0.0F);
    playerPanelWrapper.setEnabled(false);
    playerPanelWrapper.setPreferredSize(new java.awt.Dimension(70, 70));
    playerPanelWrapper.setLayout(new java.awt.GridBagLayout());

    playerPanel.setBackground(new java.awt.Color(204, 204, 204));
    playerPanel.setEnabled(false);
    playerPanel.setFocusTraversalKeysEnabled(false);
    playerPanel.setFocusable(false);
    playerPanel.setOpaque(false);
    playerPanel.setPreferredSize(new java.awt.Dimension(80, 70));
    playerPanel.setLayout(new java.awt.GridBagLayout());

    cashLabel.setFont(new java.awt.Font("Helvetica", 1, 24));
    cashLabel.setForeground(new java.awt.Color(51, 153, 0));
    cashLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/wanderingTrader.png"))); // NOI18N
    cashLabel.setText("$0.00");
    cashLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
    cashLabel.setFocusTraversalKeysEnabled(false);
    cashLabel.setFocusable(false);
    cashLabel.setIconTextGap(10);
    cashLabel.setInheritsPopupMenu(false);
    cashLabel.setLocation(new java.awt.Point(0, 10));
    cashLabel.setRequestFocusEnabled(false);
    cashLabel.setVerifyInputWhenFocusTarget(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, -10, 0);
    playerPanel.add(cashLabel, gridBagConstraints);

    currentLocation.setFont(new java.awt.Font("Helvetica", 0, 13));
    currentLocation.setForeground(new java.awt.Color(51, 51, 51));
    currentLocation.setModel(new tradewars.swing.LocationsListModel());
    currentLocation.setSelectedItem(currentLocation.getSelectedItem());
    currentLocation.setPreferredSize(new java.awt.Dimension(150, 27));
    currentLocation.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        currentLocationActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    playerPanel.add(currentLocation, gridBagConstraints);

    profitLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12));
    profitLabel.setForeground(new java.awt.Color(253, 253, 253));
    profitLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/plus.png"))); // NOI18N
    profitLabel.setText("$0.00");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 150, 0, 0);
    playerPanel.add(profitLabel, gridBagConstraints);

    gameLogButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/log.png"))); // NOI18N
    gameLogButton.setToolTipText("Show Game Log");
    gameLogButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        gameLogButtonMouseClicked(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    playerPanel.add(gameLogButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    playerPanelWrapper.add(playerPanel, gridBagConstraints);

    playerPanelBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/bg-player.jpg"))); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    playerPanelWrapper.add(playerPanelBG, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 1.0;
    getContentPane().add(playerPanelWrapper, gridBagConstraints);

    statusPanelWrapper.setPreferredSize(new java.awt.Dimension(700, 50));
    statusPanelWrapper.setLayout(new java.awt.GridBagLayout());

    statusPanel.setOpaque(false);
    statusPanel.setPreferredSize(new java.awt.Dimension(800, 50));
    statusPanel.setLayout(new java.awt.GridBagLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    statusPanel.add(timeLeftMeter, gridBagConstraints);

    // spaceMeter.setBackground(new java.awt.Color(204, 204, 255));
    // spaceMeter.setFont(new java.awt.Font("Helvetica", 0, 10));
    // spaceMeter.setToolTipText("Space Held");
    // spaceMeter.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    // spaceMeter.setBorderPainted(false);
    // spaceMeter.setFocusable(false);
    // gridBagConstraints = new java.awt.GridBagConstraints();
    // gridBagConstraints.gridx = 1;
    // gridBagConstraints.gridy = 0;
    // gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    // gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    // gridBagConstraints.weightx = 1.0;
    // statusPanel.add(spaceMeter, gridBagConstraints);

    timeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/time.png"))); // NOI18N
    timeLabel.setToolTipText("Time Left");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
    statusPanel.add(timeLabel, gridBagConstraints);

    jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/heart.png"))); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
    statusPanel.add(jLabel4, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    statusPanel.add(healthMeter, gridBagConstraints);

    spaceLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/space_empty.png"))); // NOI18N
    spaceLabel.setToolTipText("Space Available");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
    statusPanel.add(spaceLabel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    statusPanelWrapper.add(statusPanel, gridBagConstraints);

    statusBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/bg-status.png"))); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    statusPanelWrapper.add(statusBackground, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 1.0;
    getContentPane().add(statusPanelWrapper, gridBagConstraints);

    gamePanelWrapper.setBackground(new java.awt.Color(51, 51, 51));
    gamePanelWrapper.setPreferredSize(new java.awt.Dimension(700, 500));
    gamePanelWrapper.setLayout(new java.awt.GridBagLayout());

    stashTable.setModel(new StashTableModel());
    stashTable.setGridColor(new java.awt.Color(204, 204, 204));
    stashTable.setShowGrid(true);
    stashTable.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        stashTableMouseClicked(evt);
      }
    });
    staticStashScrollPane.setViewportView(stashTable);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
    gamePanelWrapper.add(staticStashScrollPane, gridBagConstraints);

    productsTable.setModel(new tradewars.swing.ProductsTableModel());
    productsTable.setGridColor(new java.awt.Color(204, 204, 204));
    productsTable.setRowHeight(20);
    productsTable.setShowGrid(true);
    productsTable.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        productsTableMouseClicked(evt);
      }
    });
    staticProductScrollPane.setViewportView(productsTable);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
    gamePanelWrapper.add(staticProductScrollPane, gridBagConstraints);

    logPanel.setOpaque(false);
    logPanel.setLayout(new java.awt.GridBagLayout());

    jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18));
    jLabel1.setForeground(new java.awt.Color(204, 204, 204));
    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/log.png"))); // NOI18N
    jLabel1.setText("Game Log");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    logPanel.add(jLabel1, gridBagConstraints);

    gameMessagesScrollPane.setBorder(null);
    gameMessagesScrollPane.setAutoscrolls(true);

    gameMessages.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    gameMessages.setDragEnabled(false);
    gameMessages.setFocusCycleRoot(false);
    gameMessages.setFocusable(false);
    gameMessages.setRequestFocusEnabled(false);
    gameMessagesScrollPane.setViewportView(gameMessages);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
    logPanel.add(gameMessagesScrollPane, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.4;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
    gamePanelWrapper.add(logPanel, gridBagConstraints);

    staticProductsLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18));
    staticProductsLabel.setForeground(new java.awt.Color(204, 204, 204));
    staticProductsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/purple-dot.png"))); // NOI18N
    staticProductsLabel.setText("Items Here");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
    gamePanelWrapper.add(staticProductsLabel, gridBagConstraints);

    staticStashLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18));
    staticStashLabel.setForeground(new java.awt.Color(204, 204, 204));
    staticStashLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/purple-dot.png"))); // NOI18N
    staticStashLabel.setLabelFor(stashTable);
    staticStashLabel.setText("Your Llama Storage");
    staticStashLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
    gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 10);
    gamePanelWrapper.add(staticStashLabel, gridBagConstraints);

    productPanelBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/bg-application.png"))); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gamePanelWrapper.add(productPanelBG, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(gamePanelWrapper, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void productsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsTableMouseClicked
      if (evt.getClickCount() == 2) {
        int i = productsTable.rowAtPoint(evt.getPoint());
        Product product = (Product) productsTable.getValueAt(i, 0);
        Trade trade = new Trade(product, product.getPrice());

        trade.setMode(Trade.Mode.BUY);
        trade.setMax(game.getPlayer().getMaxPurchase(product));

        game.setCurrentTrade(trade);
        setupTradeDialog();
      }
    }//GEN-LAST:event_productsTableMouseClicked

    private void makeTradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeTradeActionPerformed
      Trade trade = game.getCurrentTrade();

      boolean maxMode = tradeModeMax.isSelected();
      int quantity = maxMode ? trade.getMax() : Integer.parseInt(tradeQuantity.getText());
      trade.setQuantity(quantity);

      try {
        trade.commit();

        // try to toss some logs into our event queue
        String logMsg;
        Color c = U09aWanderingTraderGame.TRADE_COLOR;

        if (trade.getMode() == Trade.Mode.BUY) {
          logMsg = String.format("You bought %d \u00D7 %s at %s!",
                  quantity,
                  trade.getProduct().getName(),
                  U09aWanderingTraderGame.CURRENCY_FORMATTER.format(trade.getPrice()));
        } else {
          long price = trade.getPrice();
          long salePrice = price * quantity;

          long profit = (trade.getProduct().getPrice() - price) * quantity;
          if (profit > 0) {
            profitLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/plus.png")));
            c = U09aWanderingTraderGame.PROFITED_COLOR;
          } else {
            profitLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tradewars/resources/minus.png")));
            c = U09aWanderingTraderGame.LOST_COLOR;

          }

          profitLabel.setText(U09aWanderingTraderGame.CURRENCY_FORMATTER.format(profit));
          profitLabel.setVisible(true);

          logMsg = String.format("You sold %d \u00D7 %s for %s, making %s!",
                  quantity,
                  trade.getProduct().getName(),
                  U09aWanderingTraderGame.CURRENCY_FORMATTER.format(salePrice),
                  U09aWanderingTraderGame.CURRENCY_FORMATTER.format(profit));
        }

        logMessage(c, logMsg);

        reloadStashTable();
        refreshDisplay();
        closeTradeDialog();
      } catch (OutOfSpaceException ex) {
        showErrorMessage("You cannot fit this many in your storage!\nTry using the MAX option.", "Not enough space!");
      } catch (CannotAffordException ex) {
        showErrorMessage("You cannot afford this many!\nTry using the MAX option.", "Cannot Afford!");
      } catch (QuantityOutOfBoundsException ex) {
        showErrorMessage("You do not have that much to sell!\nTry using the MAX option.", "Not enough!");
      } catch (InvalidTradeException ex) {
        showErrorMessage(ex.getMessage(), "Invalid Trade!");
      }
    }//GEN-LAST:event_makeTradeActionPerformed

    private void cancelTradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTradeActionPerformed
      closeTradeDialog();
    }//GEN-LAST:event_cancelTradeActionPerformed

    private void tradeModeMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeModeMaxActionPerformed
      tradeQuantity.setText("" + game.getCurrentTrade().getMax());
}//GEN-LAST:event_tradeModeMaxActionPerformed

    private void stashTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stashTableMouseClicked
      if (evt.getClickCount() == 2) {
        int i = stashTable.rowAtPoint(evt.getPoint());
        Trade trade;
        Product product = (Product) stashTable.getValueAt(i, 0);

        // find price
        long price = 0L;
        try {
          price = U09aWanderingTraderGame.CURRENCY_FORMATTER.parse((String) stashTable.getValueAt(i, 1)).longValue();
        } catch (ParseException ex) {
          System.out.println("Bad price data!");
        }

        trade = new Trade(product, price);
        trade.setMode(Trade.Mode.SELL);
        trade.setMax(game.getPlayer().quantityForProduct(product, price));

        game.setCurrentTrade(trade);
        setupTradeDialog();
      }
    }//GEN-LAST:event_stashTableMouseClicked

    private void currentLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentLocationActionPerformed

      Location l = (Location) currentLocation.getSelectedItem();
      try {
        if (game.moveTo(l)) {
          logMessage(U09aWanderingTraderGame.MOVED_COLOR, String.format("Day %d: Moved to %s", game.getDay(), l.getName()));
          refreshDisplay();
          reloadProductsTable();
          handleGameEvents();
        }
      } catch (GameOverException e) {
        gameOver(e.getMessage());
      }
}//GEN-LAST:event_currentLocationActionPerformed

    private void gameLogButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameLogButtonMouseClicked
      toggleGameLog();
    }//GEN-LAST:event_gameLogButtonMouseClicked

    private void fightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fightButtonActionPerformed
      Fight f = game.getFight();
      Message m = f.attack();
      logMessage(m);

      updateFightMeters();

      if (f.fightOver()) {
        hideFightDialog();
      }
    }//GEN-LAST:event_fightButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
      Fight f = game.getFight();
      Message m = f.run();

      updateFightMeters();
      logMessage(m);

      if (f.fightOver()) {
        hideFightDialog();
      }
    }//GEN-LAST:event_runButtonActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new TradeWars().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelTrade;
  private javax.swing.JLabel cashLabel;
  private javax.swing.JComboBox currentLocation;
  private javax.swing.JButton fightButton;
  private javax.swing.JDialog fightDialog;
  private javax.swing.JLabel gameLogButton;
  private tradewars.swing.ColorTextPane gameMessages;
  private javax.swing.JScrollPane gameMessagesScrollPane;
  private javax.swing.JPanel gamePanelWrapper;
  private javax.swing.JProgressBar healthMeter;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel logPanel;
  private javax.swing.JButton makeTrade;
  private javax.swing.JProgressBar npcHealthMeter;
  private javax.swing.JLabel npcNameLabel;
  private javax.swing.JProgressBar playerHealthMeter;
  private javax.swing.JLabel playerNameLabel;
  private javax.swing.JPanel playerPanel;
  private javax.swing.JLabel playerPanelBG;
  private javax.swing.JPanel playerPanelWrapper;
  private javax.swing.JLabel productPanelBG;
  private javax.swing.JTable productsTable;
  private javax.swing.JLabel profitLabel;
  private javax.swing.JButton runButton;
  private javax.swing.JLabel spaceLabel;
  private javax.swing.JProgressBar spaceMeter;
  private javax.swing.JTable stashTable;
  private javax.swing.JScrollPane staticProductScrollPane;
  private javax.swing.JLabel staticProductsLabel;
  private javax.swing.JLabel staticQuantityLabel;
  private javax.swing.JLabel staticStashLabel;
  private javax.swing.JScrollPane staticStashScrollPane;
  private javax.swing.JLabel statusBackground;
  private javax.swing.JPanel statusPanel;
  private javax.swing.JPanel statusPanelWrapper;
  private javax.swing.JLabel timeLabel;
  private javax.swing.JProgressBar timeLeftMeter;
  private javax.swing.JDialog tradeDialog;
  private javax.swing.JLabel tradeModeLabel;
  private javax.swing.JRadioButton tradeModeMax;
  private javax.swing.JRadioButton tradeModeQuantity;
  private javax.swing.JLabel tradeNameLabel;
  private javax.swing.JPanel tradePanel;
  private javax.swing.JFormattedTextField tradeQuantity;
  private javax.swing.ButtonGroup tradeQuantityMode;
  private javax.swing.JLabel tradeTitle;
  // End of variables declaration//GEN-END:variables

  private void refreshDisplay() {
    Player p = game.getPlayer();

    timeLeftMeter.setMaximum(U09aWanderingTraderGame.DAYS_IN_GAME);
    timeLeftMeter.setValue(game.daysLeft());
    spaceMeter.setMaximum(p.getSpace());
    spaceMeter.setValue(p.spaceHeld());
    cashLabel.setText(p.getCashValue());
    healthMeter.setMaximum(p.getMaxHealth());
    healthMeter.setValue(p.getHealth());

    // set the meter icon
    if (game.getPlayer().getCapacity() >= 75) {
      spaceLabel.setIcon(IconFactory.getSpaceFullIcon());
    } else {
      spaceLabel.setIcon(IconFactory.getSpaceEmptyIcon());
    }

    reloadStashTable();
  }

  public void handleGameEvents() {
    for (Message message : game.getMessages()) {
      logMessage(message);
    }

    int response;
    boolean b = true;

    Message message;
    for (Event e : game.getEvents()) {
      if (e.requiresInput()) {
        response = JOptionPane.showConfirmDialog(this, e.getMessage(), "Game Event", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, IconFactory.getDialogIcon(JOptionPane.QUESTION_MESSAGE));
        b = (response == JOptionPane.YES_OPTION);
      }

      message = e.handleEvent(b);
      logMessage(message);
    }

    if (game.inFight()) {
      displayFightDialog();
    }

    refreshDisplay();
  }

  private void setupTradeDialog() {
    Trade trade = game.getCurrentTrade();
    Product product = trade.getProduct();

    tradeNameLabel.setText(product.getName());

    if (trade.getMode() == Trade.Mode.BUY) {
      tradeModeLabel.setText("Buying");
    } else {
      tradeModeLabel.setText("Selling");
    }

    // prepopulate the quantity
    String qty = "1";
    if (tradeModeMax.isSelected()) {
      qty = Long.toString(trade.getMax());
    }

    tradeQuantity.setText(qty);

    tradeDialog.setLocationRelativeTo(this);
    tradeDialog.setVisible(true);
  }

  public void gameOver(String reason) {
    showErrorMessage(reason, "Game Over!");
    this.setEnabled(false);
  }

  private void closeTradeDialog() {
    game.setCurrentTrade(null);
    tradeDialog.setVisible(false);
  }

  // horrible hack.
  private void reloadStashTable() {
    ((StashTableModel) stashTable.getModel()).reload();
    stashTable.repaint();
  }

  private void reloadProductsTable() {
    ((ProductsTableModel) productsTable.getModel()).reload();
    productsTable.repaint();
  }

  private void displayFightDialog() {
    Fight f = game.getFight();
    Npc npc = f.getNpc();
    npcNameLabel.setText(npc.getName());
    
    updateFightMeters();
    fightDialog.setLocationRelativeTo(this);
    fightDialog.setVisible(true);
  }

  private void updateFightMeters() {
    Fight f = game.getFight();
    Player p = game.getPlayer();
    Npc n = f.getNpc();

    playerHealthMeter.setMaximum(p.getMaxHealth());
    playerHealthMeter.setValue(p.getHealth());
    
    npcHealthMeter.setMaximum(n.getMaxHealth());
    npcHealthMeter.setValue(n.getHealth());
        
    refreshDisplay();
  }

  private void hideFightDialog() {
    Fight f = game.getFight();
    Fighter w = f.getWinner();

    game.fightOver();
    fightDialog.setVisible(false);
    
    // winner is null if we ran away
    if (w != null) {
      if (w != game.getPlayer()) {
        gameOver("You lost the fight!");
      }
    }
  }

  private void toggleGameLog() {
    logPanel.setVisible(!logPanel.isVisible());
  }

  private void showDialog(String message, String title, int messageType) {
    JOptionPane.showMessageDialog(this, message, title, messageType, IconFactory.getDialogIcon(messageType));
  }

  private void showMessage(String message, String title) {
    showDialog(message, title, JOptionPane.INFORMATION_MESSAGE);
  }

  private void showErrorMessage(String message, String title) {
    showDialog(message, title, JOptionPane.ERROR_MESSAGE);
  }
}

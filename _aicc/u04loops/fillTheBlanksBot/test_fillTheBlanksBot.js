// TESTS

// global input + canvas state
let inputValue = "";
textInput = { value: ()=>inputValue, value: (v)=>{inputValue=v;} };
textY = 30;
dictionary = {};
height = 400;

// mock p5 functions
function fill() {}
function text() {}
function textSize() {}
function background() {}
function resetMessages() { textY = 30; }
function mockTextInput(mockValue) {
  textInput = {
    value: () => mockValue  // this matches your code’s expectation
  };
}
let mockDisplayLog = [];
function displayMessage(username, textString) {
  mockDisplayLog.push({ username, textString });
}

// === TEST SUITE START ===
console.log("=== Running Text Prediction Function Tests ===");

function resetGlobals() {
  dictionary = {};
  mockDisplayLog = [];
  textY = 30;
  inputValue = "";
}


// 1️⃣ replacePunctuation()
resetGlobals();
let result1 = replacePunctuation("hello!world!", "!", ".");
console.assert(result1 === "hello.world.", "replacePunctuation should replace all '!' with '.'");

let result2 = replacePunctuation("what? huh?", "?", "!");
console.assert(result2 === "what! huh!", "replacePunctuation should replace all '?' with '!'");


// 2️⃣ addWordsToDictionary()
resetGlobals();
addWordsToDictionary(["the", "quick", "brown", "fox"]);
console.assert(dictionary["undefined*quick"].includes("the"), "addWordsToDictionary should add first word with undefined previous");
console.assert(dictionary["the*brown"].includes("quick"), "addWordsToDictionary should add middle words correctly");
console.assert(dictionary["brown*undefined"].includes("fox"), "addWordsToDictionary should add last word with undefined next");


// 3️⃣ predict()
resetGlobals();
dictionary["how*you"] = ["are"];
dictionary["are*today"] = ["you"];
let prediction = predict("how * you today");
console.assert(prediction.includes("are"), "predict should replace * with correct word from dictionary");

let unknownPrediction = predict("good * morning");
console.assert(unknownPrediction.includes("?????"), "predict should use '?????' when no match found");


// 4️⃣ trainModel()
resetGlobals();
let sampleText = "Hello world! How are you today? I am fine.";
trainModel(sampleText);
let hasKey = Object.keys(dictionary).some(k => k.includes("*"));
console.assert(hasKey, "trainModel should populate dictionary with word relationships");


// 5️⃣ sendMessage()
resetGlobals();
mockDisplayLog = [];
dictionary["how*you"] = ["are"];

mockTextInput("how * you");  // ✅ simulate input via .value() method
sendMessage();

console.assert(mockDisplayLog[0].username === "User", "sendMessage should display the user's message");
console.assert(mockDisplayLog[1].username === "Bot", "sendMessage should display the bot's reply");
console.assert(
  mockDisplayLog[1].textString.includes("are") || mockDisplayLog[1].textString.includes("?????"),
  "sendMessage bot message should be generated by predict() or placeholder"
);

// Second test case
resetGlobals();
mockDisplayLog = [];
mockTextInput("hello there"); // ✅ simulate input with no wildcard
sendMessage();

console.assert(
  mockDisplayLog[1].textString.startsWith("Give me some text"),
  "sendMessage should prompt for * input when none found"
);

console.log("✅ All tests complete!");